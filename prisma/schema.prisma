// Prisma schema for the database
// This file is used to generate the prisma client and the database schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Represents a user
// -> pseudo (the pseudo of the user)
// -> email (the email of the user)
// -> password (the hashed password of the user)
// -> roles (the roles of the user)
// -> profile (the user's personnal informations)
// -> apps (the apps created by the user)
// -> links (the user connections to apps through the portal)
// -> products (the user's cart products)
// -> purchases (the user's purchased products)
// -> checkouts (the checkouts made by the user)
// -> lastPasswordReset (the last time the password reset email has been sent)
// -> lastEmailVerif (the last time the email verification email has been sent)
// -> emailVerifiedAt (the date the email has been verified)
// -> verified (if the user is verified or not)
model User {
    id                Int            @id @default(autoincrement())
    pseudo            String         @unique @db.VarChar(64)
    email             String         @unique @db.VarChar(255)
    password          String         @db.Text
    roles             UserRoles[]
    profile           UserProfile?
    apps              App[]          @relation("author")
    links             Link[]         @relation("user")
    products          UserProduct[]  @relation("user")
    purchases         UserPurchase[] @relation("user")
    checkouts         Checkout[]     @relation("user")
    settings          UserSettings?
    lastPasswordReset DateTime?
    lastEmailVerif    DateTime?
    emailVerifiedAt   DateTime?
    verified          Boolean        @default(false)
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
}

// Represents a user profile
// -> userId (the profile's user's id)
// -> firstname (the firstname of the user)
// -> lastname (the lastname of the user)
// -> adress (the adress of the user)
// -> city (the city of the user)
// -> zipcode (the zip code of the user)
model UserProfile {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    firstname String   @db.VarChar(64)
    lastname  String   @db.VarChar(64)
    adress    String   @db.VarChar(255)
    city      String   @db.VarChar(64)
    zipcode   String   @db.VarChar(16)
    country   String   @db.VarChar(64)
    phone     String   @db.VarChar(16)
    birthdate DateTime @db.DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Represents a user settings
// -> userId (the settings's user's id)

model UserSettings {
    id           Int      @id @default(autoincrement())
    userId       Int      @unique
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    storeProfile Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

// Represents a role
// -> name (the name of the role)
// -> users (all the users with this role)
model Role {
    id        Int         @id @default(autoincrement())
    name      String      @unique @db.VarChar(64)
    users     UserRoles[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

// Represents all the roles of a user
// -> userId (the user id)
// -> roleId (the role id)
model UserRoles {
    id        Int         @id @default(autoincrement())
    userId    Int         @db.Int
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    roleId    Int         @db.Int
    role      Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

// Represents an app
// -> name (the name of the app)
// -> desccription (the description of the app)
// -> key (the secret key of the app)
// -> author (the author of the app)
// -> links (all the user that used the portal to connect to the app)
model App {
    id           Int       @id @default(autoincrement())
    name         String    @unique @db.VarChar(64)
    description  String    @db.VarChar(255)
    key          String    @db.VarChar(255)
    verified     Boolean   @default(false)
    authorId     Int       @db.Int
    author       User      @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
    links        Link[]    @relation("app")
    products     Product[] @relation("product")
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

// Represents a link between a user and an app (a user connection to an app through the portal)
// this is used to know which user connected to which app
// and if the portal should ask for manual validation or not at login (only for first connection)
// -> app (the app)
// -> user (the user)
model Link {
    id        Int      @id @default(autoincrement())
    appId     Int      @db.Int
    app       App      @relation("app", fields: [appId], references: [id], onDelete: Cascade)
    userId    Int      @db.Int
    user      User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Represents a user's cart product
// -> userId (the cart/user id)
// -> productId (the product id)
// -> quantity (the quantity of the product in the cart)
model UserProduct {
    id         Int      @id @default(autoincrement())
    userId     Int      @db.Int
    user       User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
    productId  Int      @db.Int
    product    Product  @relation("product", fields: [productId], references: [id], onDelete: Cascade)
    quantity   Int      @default(1)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

// Represents a product
// -> name (the product name)
// -> description (the product description)
// -> price (the product price)
// -> app (the app associated to the product)
model Product {
    id          Int            @id @default(autoincrement())
    name        String         @db.VarChar(64)
    description String         @db.Text
    price       Float          @db.Float
    appId       Int            @db.Int
    app         App            @relation("product", fields: [appId], references: [id], onDelete: Cascade)
    carts       UserProduct[]  @relation("product")
    purchases   UserPurchase[] @relation("product")
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
}

// Represents a product purchased by a user
// -> id (the purchase id)
// -> userId (the user id)
// -> productId (the product id)
// -> quantity (the quantity of the product purchased)
model UserPurchase {
    id         Int        @id @default(autoincrement())
    userId     Int        @db.Int
    user       User       @relation("user", fields: [userId], references: [id], onDelete: Cascade)
    productId  Int        @db.Int
    product    Product    @relation("product", fields: [productId], references: [id], onDelete: Cascade)
    quantity   Int        @default(1)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
}

// Represents a checkout session
// -> id (the checkout session id)
// -> userId (the user id)
// -> firstname (the firstname of the user)
// -> lastname (the lastname of the user)
// -> email (the email of the user)
// -> adress (the adress of the user)
// -> city (the city of the user)
// -> zipcode (the zip code of the user)
// -> products (the products in the checkout session)
// -> status (the status of the checkout session)
// -> intentId (the payment intent id)
model Checkout {
    id         Int            @id @default(autoincrement())
    userId     Int            @db.Int
    user       User           @relation("user", fields: [userId], references: [id], onDelete: Cascade)
    firstname  String         @db.VarChar(64)
    lastname   String         @db.VarChar(64)
    email      String         @db.VarChar(255)
    adress     String         @db.VarChar(255)
    city       String         @db.VarChar(64)
    zipcode    String         @db.VarChar(16)
    products   CheckoutProduct[]
    statusId   Int
    status     CheckoutStatus @relation("status", fields: [statusId], references: [id], onDelete: Cascade)
    intentId   String         @db.VarChar(64)
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
}

model CheckoutProduct {
    id         Int        @id @default(autoincrement())
    checkoutId Int        @db.Int
    checkout   Checkout   @relation(fields: [checkoutId], references: [id], onDelete: Cascade)

    quantity   Int        @default(1)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
}

// Represents a checkout status
// -> id (the checkout status id)
// -> name (the checkout status name)
model CheckoutStatus {
    id        Int        @id @default(autoincrement())
    name      String     @unique @db.VarChar(64)
    checkouts Checkout[] @relation("status")
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}
