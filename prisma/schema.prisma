// Prisma schema for the database
// This file is used to generate the prisma client and the database schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Represents a user
// -> pseudo (the pseudo of the user)
// -> email (the email of the user)
// -> password (the hashed password of the user)
// -> roles (the roles of the user)
// -> profile (the user's personnal informations)
// -> apps (the apps created by the user)
// -> links (the user connections to apps through the portal)
// -> emailVerified (if the email has been verified)
// -> verified (if the user is verified or not)
model User {
    id                Int            @id @default(autoincrement())
    pseudo            String         @unique @db.VarChar(64)
    email             String         @unique @db.VarChar(255)
    password          String         @db.Text
    roles             UserRoles[]
    apps              App[]          @relation("author")
    links             Link[]         @relation("user")
    emailVerified     Boolean        @default(false)
    verified          Boolean        @default(false)
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
}

// Represents a role
// -> name (the name of the role)
// -> users (all the users with this role)
model Role {
    id        Int         @id @default(autoincrement())
    name      String      @unique @db.VarChar(64)
    users     UserRoles[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

// Represents all the roles of a user
// -> userId (the user id)
// -> roleId (the role id)
model UserRoles {
    id        Int         @id @default(autoincrement())
    userId    Int         @db.Int
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    roleId    Int         @db.Int
    role      Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

// Represents an app
// -> name (the name of the app)
// -> desccription (the description of the app)
// -> key (the secret key of the app)
// -> author (the author of the app)
// -> links (all the user that used the portal to connect to the app)
model App {
    id           Int       @id @default(autoincrement())
    name         String    @unique @db.VarChar(64)
    description  String    @db.VarChar(255)
    key          String    @db.VarChar(255)
    verified     Boolean   @default(false)
    authorId     Int       @db.Int
    author       User      @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
    links        Link[]    @relation("app")
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

// Represents a link between a user and an app (a user connection to an app through the portal)
// this is used to know which user connected to which app
// and if the portal should ask for manual validation or not at login (only for first connection)
// -> app (the app)
// -> user (the user)
model Link {
    id        Int      @id @default(autoincrement())
    appId     Int      @db.Int
    app       App      @relation("app", fields: [appId], references: [id], onDelete: Cascade)
    userId    Int      @db.Int
    user      User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
